1010 Radix (25)（25 分）
Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is "yes", if 6 is a decimal number and 110 is a binary number.

Now for any pair of positive integers N1 and N2, your task is to find the radix of one number while that of the other is given.

Input Specification:

Each input file contains one test case. Each case occupies a line which contains 4 positive integers:\ N1 N2 tag radix\ Here N1 and N2 each has no more than 10 digits. A digit is less than its radix and is chosen from the set {0-9, a-z} where 0-9 represent the decimal numbers 0-9, and a-z represent the decimal numbers 10-35. The last number "radix" is the radix of N1 if "tag" is 1, or of N2 if "tag" is 2.

Output Specification:

For each test case, print in one line the radix of the other number so that the equation N1 = N2 is true. If the equation is impossible, print "Impossible". If the solution is not unique, output the smallest possible radix.

Sample Input 1:

6 110 1 10
Sample Output 1:

2
Sample Input 2:

1 ab 1 2
Sample Output 2:

Impossible

////Created By Caijie,Senior Student of BJTU
//参考https://blog.csdn.net/liuchuo/article/details/52495925
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>

using namespace std;

long long inf = 9223372036854775807;
char n1[20], n2[20];
long long map[256];
int tag, radix;

long long getTen(char n1[], long long radix, long long t) {
    long long result = 0;
    int len = strlen(n1);
    for (int i = 0; i < len; i++) {
        result = result * radix + map[n1[i]];
        if (result < 0 || result > t)
            return -1;
    }
    return result;
}

int getLargestDigit(char a2[]) {
    int result = -1;
    int len = strlen(a2);
    for (int j = 0; j < len; j++) {
        if (map[a2[j]] > result)
            result = map[a2[j]];
    }
    return result + 1;
}

int cmp(char n2[], long long radix, long long num1) {
    long long num = getTen(n2, radix, num1);
    if (num < 0)
        return 1;
    if (num < num1)
        return -1;
    return (num == num1) ? 0 : 1;
}

long long binarysearch(char n2[], long long low, long long high, long long num1) {
    long long mid;
    while (low <= high) {
        mid = (low + high) / 2;
        int flag = cmp(n2, mid, num1);
        if (flag == -1)
            low = mid+1;
        else if (flag == 0)
            return mid;
        else
            high = mid-1;
    }
    return -1;
}

int main() {
    cin >> n1 >> n2 >> tag >> radix;
    for (char i = '0'; i <= '9'; i++)
        map[i] = i - '0';
    for (char j = 'a'; j <= 'z'; j++)
        map[j] = j - 'a' + 10;

    if (tag == 2)
        swap(n1, n2);

    long long num1 = getTen(n1, radix, inf);
    long long low = getLargestDigit(n2);
    long long high = max(low, num1) + 1;
    long long ans = binarysearch(n2, low, high, num1);
    if(ans == -1 )
        cout << "Impossible";
    else
        printf("%lld",ans);
    return 0;
}
