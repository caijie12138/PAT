//Create by Caijie.Senior student of BJTU

1030. 完美数列(18/25)超时的还是没过去 特判了两个 还有一个没找出来

时间限制
300 ms
内存限制
65536 kB
代码长度限制
8000 B
判题程序
Standard
作者
CAO, Peng
给定一个正整数数列，和正整数p，设这个数列中的最大值是M，最小值是m，如果M <= m * p，则称这个数列是完美数列。

现在给定参数p和一些正整数，请你从中选择尽可能多的数构成一个完美数列。

输入格式：

输入第一行给出两个正整数N和p，其中N（<= 105）是输入的正整数的个数，p（<= 109）是给定的参数。第二行给出N个正整数，每个数不超过109。

输出格式：

在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。

输入样例：
10 8
2 3 20 4 5 1 6 7 8 9
输出样例：
8

import java.lang.*;
import java.io.*;

public class Main {
    public static void sort(long[] array, int low, int high) {
        if (low < high) {
            int pos = position(array, low, high);
            sort(array, 0, pos - 1);
            sort(array, pos + 1, high);
        }
    }

    public static int position(long[] array, int low, int high) {
        long index = array[low];
        while (low < high) {
            while (low < high && array[high] >= index)
                high--;
            array[low] = array[high];
            while (low < high && array[low] <= index)
                low++;
            array[high] = array[low];
        }
        array[low] = index;
        return low;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] in = br.readLine().split(" ");
        int sum = Integer.parseInt(in[0]);
        long p = Long.parseLong(in[1]);
        String[] data = br.readLine().split(" ");
        long[] array = new long[sum];
        for (int i = 0; i < sum; i++) {
            array[i] = Long.parseLong(data[i]);
        }
        sort(array, 0, sum - 1);
        boolean flag = false;
        for (int i = 0, j = sum - 1; j >= 0 && i < sum; ) {
            if (array[j] < array[i] * p || array[j] == array[i] * p) {
                System.out.print(j - i + 1);
                break;
            }
            if (!flag) {
                i++;
                flag = true;
            } else {
                j--;
                flag = false;
            }
        }
    }
}
