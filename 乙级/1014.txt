//Create by Caijie.Senior student of BJTU
1014. 福尔摩斯的约会 (20)

时间限制
100 ms
内存限制
65536 kB
代码长度限制
8000 B
判题程序
Standard
作者
CHEN, Yue
大侦探福尔摩斯接到一张奇怪的字条：“我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&hgsfdk d&Hyscvnm”。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间“星期四 14:04”，因为前面两字符串中第1对相同的大写英文字母（大小写有区分）是第4个字母'D'，代表星期四；第2对相同的字符是'E'，那是第5个英文字母，代表一天里的第14个钟头（于是一天的0点到23点由数字0到9、以及大写字母A到N表示）；后面两字符串第1对相同的英文字母's'出现在第4个位置（从0开始计数）上，代表第4分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。

输入格式：

输入在4行中分别给出4个非空、不包含空格、且长度不超过60的字符串。

输出格式：

在一行中输出约会的时间，格式为“DAY HH:MM”，其中“DAY”是某星期的3字符缩写，即MON表示星期一，TUE表示星期二，WED表示星期三，THU表示星期四，FRI表示星期五，SAT表示星期六，SUN表示星期日。题目输入保证每个测试存在唯一解。

输入样例：
3485djDkxh4hhGE
2984akDfkkkkggEdsb
s&hgsfdk
d&Hyscvnm
输出样例：
THU 14:04

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.lang.*;

public class Main {
    public static boolean isUpcaseG(String s, int i) {
        if (s.charAt(i) >= 65 && s.charAt(i) <= 71)
            return true;
        return false;
    }

    public static boolean isUpcaseN(String s, int i) {
        if (s.charAt(i) >= 65 && s.charAt(i) <= 78)
            return true;
        return false;
    }

    public static boolean isNum(String s, int i) {
        if (s.charAt(i) >= 48 && s.charAt(i) <= 57)
            return true;
        return false;
    }

    public static boolean isChar(String s, int i) {
        if ((s.charAt(i) >= 97 && s.charAt(i) <= 122 )|| (s.charAt(i) >= 65 && s.charAt(i) <= 90))
            return true;
        return false;
    }

    public static void main(String[] args) throws IOException {
        //A:65 Z:90 a:97 z:122 0:48 9:57
        Map<Integer, String> map = new HashMap<Integer, String>();
        boolean flag = false;
        map.put(1, "MON");
        map.put(2, "TUE");
        map.put(3, "WED");
        map.put(4, "THU");
        map.put(5, "FRI");
        map.put(6, "SAT");
        map.put(7, "SUN");
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        String[] contex = new String[4];
        for (int i = 0; i < 4; i++)
            contex[i] = bufferedReader.readLine();
        for (int i = 0; i < (contex[0].length() > contex[1].length() ? contex[1].length() : contex[0].length()); i++) {
            if (flag == true && contex[0].charAt(i) == contex[1].charAt(i)) {
                if (isUpcaseN(contex[0], i) || isNum(contex[0], i)) {
                    if (isUpcaseN(contex[0], i))
                        System.out.print(contex[1].charAt(i) - 55 + ":");
                    else
                        System.out.print("0" + (contex[1].charAt(i) - 48) + ":");
                    break;
                }
            } else if (contex[0].charAt(i) == contex[1].charAt(i) && flag == false)
                if (isUpcaseG(contex[0], i)){
                    System.out.print(map.get(contex[0].charAt(i) - 64) + " ");
                    flag = true;
                }
        }
        for (int i = 0; i < (contex[2].length() > contex[3].length() ? contex[3].length() : contex[2].length()); i++) {
            if (contex[2].charAt(i) == contex[3].charAt(i) && isChar(contex[2],i)){
                if (i >= 0 && i < 10)
                    System.out.print("0" + i);
                else
                    System.out.print(i);
                break;
            }
        }
        System.out.println();
    }
}
