//Create by Caijie.Senior student of BJTU
1025. 反转链表 (12/25)这题真的挺难的 只对了一个😄

时间限制
300 ms
内存限制
65536 kB
代码长度限制
8000 B
判题程序
Standard
作者
CHEN, Yue
给定一个常数K以及一个单链表L，请编写程序将L中每K个结点反转。例如：给定L为1→2→3→4→5→6，K为3，则输出应该为3→2→1→6→5→4；如果K为4，则输出应该为4→3→2→1→5→6，即最后不到K个元素不反转。

输入格式：

每个输入包含1个测试用例。每个测试用例第1行给出第1个结点的地址、结点总个数正整数N(<= 105)、以及正整数K(<=N)，即要求反转的子链结点的个数。结点的地址是5位非负整数，NULL地址用-1表示。

接下来有N行，每行格式为：

Address Data Next

其中Address是结点地址，Data是该结点保存的整数数据，Next是下一结点的地址。

输出格式：

对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。

输入样例：
00100 6 4
00000 4 99999
00100 1 12309
68237 6 -1
33218 3 00000
99999 5 68237
12309 2 33218
输出样例：
00000 4 33218
33218 3 12309
12309 2 00100
00100 1 99999
99999 5 68237
68237 6 -1


import java.util.*;
import java.lang.*;
import java.io.*;

class Node {
    public String address;
    public int data;
    public String next;

    public Node(String address, int data, String next) {
        this.address = address;
        this.data = data;
        this.next = next;
    }

}

public class Main {
    public static void tranverse(LinkedList<Node> linkedList, int num) {
        for (int i = 1; i <= linkedList.size() / num; i++) {
            for (int j = num * i - 1; j>=0; j--) {
                Node now = linkedList.get(j);
                if(j-1>=0)
                    System.out.println(now.address + " " + now.data + " " + linkedList.get(j-1).address);
                else
                    System.out.println(now.address + " " + now.data + " " + linkedList.get(j+1).address);
                linkedList.remove(now);
            }
        }
        for (int k = 0; k < linkedList.size(); k++)
            System.out.println(linkedList.get(k).address + " " + linkedList.get(k).data + " " + linkedList.get(k).next);
    }

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        String line = bufferedReader.readLine();
        String[] message = line.split(" ");
        String firstadd = message[0];
        int count = Integer.parseInt(message[1]);
        int num = Integer.parseInt(message[2]);
        LinkedList<Node> list1 = new LinkedList<>();
        LinkedList<Node> list2 = new LinkedList<>();
        for (int i = 0; i < count; i++) {
            String obj = bufferedReader.readLine();
            String[] pro = obj.split(" ");
            list1.add(new Node(pro[0], Integer.parseInt(pro[1]), pro[2]));
        }
        Iterator<Node> iterator = list1.iterator();
        while (count > 0) {
            if (!iterator.hasNext())
                iterator = list1.iterator();
            Node now = iterator.next();
            if (list2.isEmpty() && now.address.equals(firstadd)) {
                list2.add(now);
                count--;
            } else if (!list2.isEmpty() && now.address.equals(list2.getLast().next)) {
                list2.add(now);
                count--;
            }
        }
        tranverse(list2, num);
    }
}
