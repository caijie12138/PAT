//Create by Caijie.Senior student of BJTU
1020. 月饼 (23/25)有一个答案错误

时间限制
100 ms
内存限制
65536 kB
代码长度限制
8000 B
判题程序
Standard
作者
CHEN, Yue
月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。

注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有3种月饼，其库存量分别为18、15、10万吨，总售价分别为75、72、45亿元。如果市场的最大需求量只有20万吨，那么我们最大收益策略应该是卖出全部15万吨第2种月饼、以及5万吨第3种月饼，获得 72 + 45/2 = 94.5（亿元）。

输入格式：

每个输入包含1个测试用例。每个测试用例先给出一个不超过1000的正整数N表示月饼的种类数、以及不超过500（以万吨为单位）的正整数D表示市场最大需求量。随后一行给出N个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出N个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。

输出格式：

对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后2位。

输入样例：
3 20
18 15 10
75 72 45
输出样例：
94.50

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.lang.*;

class MoonCake implements Comparable {
    public int price_sum;
    public int storage;
    public float price_single;

    public MoonCake(int price, int storage) {
        this.price_sum = price;
        this.storage = storage;
        this.price_single = (float) price / (float) storage;
    }

    @Override
    public int compareTo(Object o) {
        MoonCake moonCake = (MoonCake) o;
        if(moonCake.storage == 0)
            return 1;
        return moonCake.price_single - this.price_single > 0 ? 1 : -1;
    }
}

//String.format("%.2f", f)
public class Main {
    public static float findmost(Set<MoonCake> set, int sum) {
        float sum_price = 0.0f;
        boolean flag = false;
        Iterator<MoonCake> iterator = set.iterator();
            while (sum != 0 && iterator.hasNext()) {
                MoonCake moonCake = iterator.next();
                if (moonCake.storage >= sum && flag == false)
                    return sum * moonCake.price_single;
                if(moonCake.storage >= sum ) {
                    sum_price += sum * moonCake.price_single;
                    sum = 0;
                }
                else {
                    sum -= moonCake.storage;
                    sum_price += moonCake.price_sum;
                    flag = true;
                }
            }
        return sum_price;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        String first = bufferedReader.readLine();
        String[] line1 = first.split(" ");
        int kinds = Integer.parseInt(line1[0]);
        int sum = Integer.parseInt(line1[1]);
        String second = bufferedReader.readLine();
        String[] storage = second.split(" ");
        int[] sto = new int[kinds];
        for (int i = 0; i < kinds; i++)
            sto[i] = Integer.parseInt(storage[i]);
        String third = bufferedReader.readLine();
        String[] price = third.split(" ");
        int[] pri = new int[kinds];
        for (int i = 0; i < kinds; i++)
            pri[i] = Integer.parseInt(price[i]);
        TreeSet<MoonCake> sets = new TreeSet<>();
        for (int i = 0; i < kinds; i++)
            sets.add(new MoonCake(pri[i], sto[i]));
        System.out.print(String.format("%.2f", findmost(sets, sum)));
    }
}
