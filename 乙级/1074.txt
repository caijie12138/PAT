1074 宇宙无敌加法器(20)（20 分）
地球人习惯使用十进制数，并且默认一个数字的每一位都是十进制的。而在PAT星人开挂的世界里，每个数字的每一位都是不同进制的，这种神奇的数字称为“PAT数”。每个PAT星人都必须熟记各位数字的进制表，例如“……0527”就表示最低位是7进制数、第2位是2进制数、第3位是5进制数、第4位是10进制数，等等。每一位的进制d或者是0（表示十进制）、或者是[2，9]区间内的整数。理论上这个进制表应该包含无穷多位数字，但从实际应用出发，PAT星人通常只需要记住前20位就够用了，以后各位默认为10进制。

在这样的数字系统中，即使是简单的加法运算也变得不简单。例如对应进制表“0527”，该如何计算“6203+415”呢？我们得首先计算最低位：3+5=8；因为最低位是7进制的，所以我们得到1和1个进位。第2位是：0+1+1（进位）=2；因为此位是2进制的，所以我们得到0和1个进位。第3位是：2+4+1（进位）=7；因为此位是5进制的，所以我们得到2和1个进位。第4位是：6+1（进位）=7；因为此位是10进制的，所以我们就得到7。最后我们得到：6203+415=7201。

输入格式：

输入首先在第一行给出一个N位的进制表（0 < N <=20），以回车结束。 随后两行，每行给出一个不超过N位的非负的PAT数。

输出格式：

在一行中输出两个PAT数之和。

输入样例：

30527
06203
415
输出样例：

7201


//Create by Caijie.Senior student of BJTU
import java.lang.*;
import java.io.*;
public class Main{
    static int result[] = new int[20];
    static int index = -1;
    public static int calcu(int a,int b,int c,int d){
        if(c==0)
            c = 10;
        index++;
        result[index] = (a+b+d)%c;
        return (a+b+d)/c;
    }
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        String standard = bufferedReader.readLine();
        String num1 = bufferedReader.readLine();
        String num2 = bufferedReader.readLine();
        boolean flag = false;
        int add = 0;
        for(int i = num1.length()-1,j = num2.length()-1,k=standard.length()-1;j>=0||i>=0;i--,j--,k--){
            try{
                add = calcu(num1.charAt(i)-48,num2.charAt(j)-48,standard.charAt(k)-48,add);
            }catch (StringIndexOutOfBoundsException e){
                if(i<0)
                    add = calcu(0,num2.charAt(j)-48,standard.charAt(k)-48,add);
                else if(j<0)
                    add = calcu(num1.charAt(i)-48,0,standard.charAt(k)-48,add);
            }
        }
        if(add!=0) {
            System.out.print(add);
            for(int m = index;m>=0;m--)
                System.out.print(result[m]);
            return;
        }
        for(int m = index;m>=0;m--)
        {
            if(index==0) {
                System.out.print(result[index]);
                return;
            }
            if (result[m]!=0)
                flag = true;
            if(flag)
                System.out.print(result[m]);
        }
        if(!flag)
            System.out.print(result[0]);
    }
}
