1073 多选题常见计分法(20)（20 分）
批改多选题是比较麻烦的事情，有很多不同的计分方法。有一种最常见的计分方法是：如果考生选择了部分正确选项，并且没有选择任何错误选项，则得到50%分数；如果考生选择了任何一个错误的选项，则不能得分。本题就请你写个程序帮助老师批改多选题，并且指出哪道题的哪个选项错的人最多。

输入格式：

输入在第一行给出两个正整数N（<=1000）和M（<=100），分别是学生人数和多选题的个数。随后M行，每行顺次给出一道题的满分值（不超过5的正整数）、选项个数（不少于2且不超过5的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母a开始顺次排列。各项间以1个空格分隔。最后N行，每行给出一个学生的答题情况，其每题答案格式为“(选中的选项个数 选项1 ……)”，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。

输出格式：

按照输入的顺序给出每个学生的得分，每个分数占一行，输出小数点后1位。最后输出错得最多的题目选项的信息，格式为：“错误次数 题目编号（题目按照输入的顺序从1开始编号）-选项号”。如果有并列，则每行一个选项，按题目编号递增顺序输出；再并列则按选项号递增顺序输出。行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出“Too simple”。

输入样例1：

3 4 
3 4 2 a c
2 5 1 b
5 3 2 b c
1 5 4 a b d e
(2 a c) (3 b d e) (2 a c) (3 a b e)
(2 a c) (1 b) (2 a b) (4 a b d e)
(2 b d) (1 e) (1 c) (4 a b c d)
输出样例1：

3.5
6.0
2.5
2 2-e
2 3-a
2 3-b
输入样例2：

2 2 
3 4 2 a c
2 5 1 b
(2 a c) (1 b)
(2 a c) (1 b)
输出样例2：

5.0
5.0
Too simple

//未完成
import java.util.*;
import java.lang.*;
import java.io.*;

class Subject {
    public int score;
    public int num_choice;
    public int num_right;
    public int[] answer = {0, 0, 0, 0, 0};

    public Subject(int score, int num_choice, int num_right, String answer) {
        this.score = score;
        this.num_right = num_right;
        this.num_choice = num_choice;
        String answers = answer.replace(" ", "");
        for (int i = 0; i < answers.length(); i++)
            this.answer[answers.charAt(i) - 97]++;
    }
    public void setAnswer(int[] answer){
        this.answer = answer;
    }
}

public class Main {
    static int num_error[][] = new int[101][5];

    public static int judge(String a1, int[] answer, int k) {
        int flag = 1;
        for (int i = 0; i < a1.length(); i++)
            if (answer[a1.charAt(i) - 97] == 0) {
                num_error[k][a1.charAt(i) - 97]++;
                flag = 0;
                continue;
            } else
                answer[a1.charAt(i) - 97] = 0;
        if (flag == 1) {
            for (int j = 0; j < answer.length; j++)
                if (answer[j] == 1) {
                    flag = 2;
                    return flag;
                }
        }
        return flag;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader buf = new BufferedReader(new InputStreamReader(System.in));
        String mesg = buf.readLine();
        String[] message = mesg.split(" ");
        int num_stu = Integer.parseInt(message[0]);
        int num_subject = Integer.parseInt(message[1]);
        Subject[] subjects = new Subject[num_subject];
        for (int i = 0; i < num_subject; i++) {
            String sub = buf.readLine();
            String m = sub.substring(0, 6);
            String answer = sub.substring(6, sub.length());
            String[] messages = m.split(" ");
            int score = Integer.parseInt(messages[0]);
            int num_choice = Integer.parseInt(messages[1]);
            int num_answer = Integer.parseInt(messages[2]);
            subjects[i] = new Subject(score, num_choice, num_answer, answer);
        }
        for (int j = 0; j < num_stu; j++) {
            double score = 0.0;
            String ans = buf.readLine();
            ans = ans.substring(1, ans.length() - 1);
            String[] haha = ans.split("\\) \\(");
            int[] answers;
            for (int k = 0; k < haha.length; k++) {
                int result;
                String left = haha[k].substring(2, haha[k].length());
                left = left.replace(" ", "");
                answers = new int[5];
                for(int m = 0;m<5;m++)
                    answers[m] = subjects[k].answer[m];
                result = judge(left, subjects[k].answer, k);
                subjects[k].setAnswer(answers);
                if(result==1){
                    score+= subjects[k].score;
                }
                else if(result==2){
                    score += (double)subjects[k].score/2.0;
                }
            }
            System.out.println(score);


        }
    }
}
