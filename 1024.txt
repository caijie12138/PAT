//Create by Caijie.Senior student of BJTU
1024. 科学计数法 (16/20)有一个答案错误，两个超时 如果直接使用java封装的方法会超时

时间限制
100 ms
内存限制
65536 kB
代码长度限制
8000 B
判题程序
Standard
作者
HOU, Qiming
科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式[+-][1-9]"."[0-9]+E[+-][0-9]+，即数字的整数部分只有1位，小数部分至少有1位，该数字及其指数部分的正负号即使对正数也必定明确给出。

现以科学计数法的格式给出实数A，请编写程序按普通数字表示法输出A，并保证所有有效位都被保留。

输入格式：

每个输入包含1个测试用例，即一个以科学计数法表示的实数A。该数字的存储长度不超过9999字节，且其指数的绝对值不超过9999。

输出格式：

对每个测试用例，在一行中按普通数字表示法输出A，并保证所有有效位都被保留，包括末尾的0。

输入样例1：
+1.23400E-03
输出样例1：
0.00123400
输入样例2：
-1.2E+10
输出样例2：
-12000000000

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.lang.*;

public class Main {
    public static void result(String before, String after) {
        if (before.charAt(0) == '-') {
            System.out.print("-");
        }
        before = before.substring(1);
        if(Integer.parseInt(after)==0) {
            System.out.print(before);
            return;
        }
        if (after.charAt(0) == '-') {
            after = after.substring(1);
            System.out.print("0.");
            for (int i = 0; i < Integer.parseInt(after) - 1; i++)
                System.out.print("0");
            for (int i = 0; i < before.length(); i++)
                if (before.charAt(i) != '.')
                    System.out.print(String.valueOf(before.charAt(i)));
        } else {
            int i;
            after = after.substring(1);
            System.out.print(String.valueOf(before.charAt(0)));
            for(i = 2;i<before.length();i++)
                System.out.print(String.valueOf(before.charAt(i)));
            if(i+2<Integer.parseInt(after))
                for(int j= Integer.parseInt(after)-i+2;j>0;j--)
                    System.out.print("0");
        }
    }
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        String line = bufferedReader.readLine();
        String[] nums = line.split("E");
        result(nums[0],nums[1]);
    }
}
